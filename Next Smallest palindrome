#include <iostream>
#include<bits/stdc++.h>
using namespace std;

int digits(int n,vector<int> &numArray){
	int count=0;
	while(n){
		numArray.push_back(n%10);
		n=n/10;
		count++;
	}
	sort(numArray.begin(),numArray.end());
	return count;
}
bool allNine(int n,vector<int> &numArray){
	int size=numArray.size();
	for(int i=0;i<size;i++){
		if(numArray[i]!=9){
			return false;
		}
	}
	return true;
}
vector<int> nextPalindrome(int n){
	vector<int> numArray;
	int digit=digits(n,numArray);
	if(allNine(n,numArray)){
		numArray[0]=1;
		for( int i=1;i<digit;i++){
			numArray[i]=0;
		}
		numArray.push_back(1);
		return numArray;
	}
	
	int mid = digit/2;
 
    // A bool variable to check if copy of left side to right is sufficient or not
    bool leftsmaller = false;
 
    // end of left side is always 'mid -1'
    int i = mid - 1;
 
    // Begining of right side depends if n is odd or even
    int j = (digit % 2==1)? mid + 1 : mid;
 
   // Initially, ignore the middle same digits 
    while (i >= 0 && numArray[i] == numArray[j])
        i--,j++;
 
    // Find if the middle digit(s) need to be incremented or not (or copying left 
    // side is not sufficient)
    if ( i < 0 || numArray[i] < numArray[j])
        leftsmaller = true;
        

    // Copy the mirror of left to tight
    while (i >= 0)
    {
        numArray[j] = numArray[i];
        j++;
        i--;
    }

 
    // Handle the case where middle digit(s) must be incremented. 
    // This part of code is for CASE 1 and CASE 2.2
    if (leftsmaller == true)
    {
        int carry = 1;
        i = mid - 1;
 
        // If there are odd digits, then increment
        // the middle digit and store the carry
        if (digit%2 == 1)
        {
            numArray[mid] += carry;
            carry = numArray[mid] / 10;
            numArray[mid] %= 10;
            j = mid + 1;
        }
        else
            j = mid;
 
        // Add 1 to the rightmost digit of the left side, propagate the carry 
        // towards MSB digit and simultaneously copying mirror of the left side 
        // to the right side.
        while (i >= 0)
        {
            numArray[i] += carry;
            carry = numArray[i] / 10;
            numArray[i] %= 10;
            numArray[j++] = numArray[i--]; // copy mirror to right
        }
    }
	return numArray;
}
int main() {
	int n;
	cin>>n;
	vector<int> arr = nextPalindrome(n);
	for(int i=0;i<arr.size();i++){
		cout<<arr[i];
	}
} 
