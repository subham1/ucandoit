//The idea is to add everything to a set. Then iterate over the set. Note that you have to consume only O(n) space. 

#include<algorithm>
#include<unordered_set>
vector<int> longestSubsequence(int *arr, int n){
	// Write your code here
  unordered_set<int> s;
  vector<int> result;
  for(int i=0;i<n;i++){
    s.insert(arr[i]);
  }
  int len=0;
  int start=arr[0];
  for(int i=0;i<n;i++){
    if(s.find(arr[i]-1)==s.end()){   // we first check if that number is start of that sequence or not
      int j= arr[i];
      while(s.find(j)!=s.end()){  // If it is start, then we go till the last number of that sequence.
        j+=1;
      }
      if(j-arr[i]>len){
        len =j-arr[i];
        start=arr[i];
      }
    }
  }
  for(int k=start;k<=start+len-1;k++){
    result.push_back(k);
  }
  return result;
}

